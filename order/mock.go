// Code generated by MockGen. DO NOT EDIT.
// Source: equity-trading/pkg/db (interfaces: DBLayer)

// Package mock is a generated GoMock package.
package mock

import (
	funds "equity-trading/pkg/db/funds"
	scrip "equity-trading/pkg/db/scrip"
	user "equity-trading/pkg/db/user"
	watchlist "equity-trading/pkg/db/watchlist"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBLayer is a mock of DBLayer interface
type MockDBLayer struct {
	ctrl     *gomock.Controller
	recorder *MockDBLayerMockRecorder
}

// MockDBLayerMockRecorder is the mock recorder for MockDBLayer
type MockDBLayerMockRecorder struct {
	mock *MockDBLayer
}

// NewMockDBLayer creates a new mock instance
func NewMockDBLayer(ctrl *gomock.Controller) *MockDBLayer {
	mock := &MockDBLayer{ctrl: ctrl}
	mock.recorder = &MockDBLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBLayer) EXPECT() *MockDBLayerMockRecorder {
	return m.recorder
}

// AddStockViewCount mocks base method
func (m *MockDBLayer) AddStockViewCount(arg0 scrip.AddStockViewCountParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddStockViewCount", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddStockViewCount indicates an expected call of AddStockViewCount
func (mr *MockDBLayerMockRecorder) AddStockViewCount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStockViewCount", reflect.TypeOf((*MockDBLayer)(nil).AddStockViewCount), arg0)
}

// CheckAndCreateWatchlist mocks base method
func (m *MockDBLayer) CheckAndCreateWatchlist(arg0 watchlist.Watchlist) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndCreateWatchlist", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndCreateWatchlist indicates an expected call of CheckAndCreateWatchlist
func (mr *MockDBLayerMockRecorder) CheckAndCreateWatchlist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndCreateWatchlist", reflect.TypeOf((*MockDBLayer)(nil).CheckAndCreateWatchlist), arg0)
}

// CreateIntialWatchlist mocks base method
func (m *MockDBLayer) CreateIntialWatchlist(arg0 string) ([]watchlist.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIntialWatchlist", arg0)
	ret0, _ := ret[0].([]watchlist.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIntialWatchlist indicates an expected call of CreateIntialWatchlist
func (mr *MockDBLayerMockRecorder) CreateIntialWatchlist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIntialWatchlist", reflect.TypeOf((*MockDBLayer)(nil).CreateIntialWatchlist), arg0)
}

// CreateUser mocks base method
func (m *MockDBLayer) CreateUser(arg0 user.User) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockDBLayerMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDBLayer)(nil).CreateUser), arg0)
}

// DeleteSymbolFromWatchlist mocks base method
func (m *MockDBLayer) DeleteSymbolFromWatchlist(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSymbolFromWatchlist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSymbolFromWatchlist indicates an expected call of DeleteSymbolFromWatchlist
func (mr *MockDBLayerMockRecorder) DeleteSymbolFromWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSymbolFromWatchlist", reflect.TypeOf((*MockDBLayer)(nil).DeleteSymbolFromWatchlist), arg0, arg1)
}

// DeleteUserByID mocks base method
func (m *MockDBLayer) DeleteUserByID(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID
func (mr *MockDBLayerMockRecorder) DeleteUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockDBLayer)(nil).DeleteUserByID), arg0)
}

// DeleteWatchlist mocks base method
func (m *MockDBLayer) DeleteWatchlist(arg0 int64, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWatchlist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWatchlist indicates an expected call of DeleteWatchlist
func (mr *MockDBLayerMockRecorder) DeleteWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWatchlist", reflect.TypeOf((*MockDBLayer)(nil).DeleteWatchlist), arg0, arg1)
}

// FetchWatchlistSymbols mocks base method
func (m *MockDBLayer) FetchWatchlistSymbols(arg0 string, arg1 int64) ([]watchlist.WatchlistSymbol, map[string]watchlist.WatchlistSymbol, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWatchlistSymbols", arg0, arg1)
	ret0, _ := ret[0].([]watchlist.WatchlistSymbol)
	ret1, _ := ret[1].(map[string]watchlist.WatchlistSymbol)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchWatchlistSymbols indicates an expected call of FetchWatchlistSymbols
func (mr *MockDBLayerMockRecorder) FetchWatchlistSymbols(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWatchlistSymbols", reflect.TypeOf((*MockDBLayer)(nil).FetchWatchlistSymbols), arg0, arg1)
}

// GetMasterSymbols mocks base method
func (m *MockDBLayer) GetMasterSymbols(arg0 scrip.GetMasterSymbolsParams) ([]scrip.MasterSymbol, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMasterSymbols", arg0)
	ret0, _ := ret[0].([]scrip.MasterSymbol)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetMasterSymbols indicates an expected call of GetMasterSymbols
func (mr *MockDBLayerMockRecorder) GetMasterSymbols(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMasterSymbols", reflect.TypeOf((*MockDBLayer)(nil).GetMasterSymbols), arg0)
}

// GetMetadata mocks base method
func (m *MockDBLayer) GetMetadata() ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata")
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockDBLayerMockRecorder) GetMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockDBLayer)(nil).GetMetadata))
}

// GetPaymentSummary mocks base method
func (m *MockDBLayer) GetPaymentSummary(arg0 string) ([]funds.TransactionSummary, float64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPaymentSummary", arg0)
	ret0, _ := ret[0].([]funds.TransactionSummary)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(float64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPaymentSummary indicates an expected call of GetPaymentSummary
func (mr *MockDBLayerMockRecorder) GetPaymentSummary(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPaymentSummary", reflect.TypeOf((*MockDBLayer)(nil).GetPaymentSummary), arg0)
}

// GetPopularStocks mocks base method
func (m *MockDBLayer) GetPopularStocks(arg0 string) ([]scrip.MasterSymbol, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularStocks", arg0)
	ret0, _ := ret[0].([]scrip.MasterSymbol)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularStocks indicates an expected call of GetPopularStocks
func (mr *MockDBLayerMockRecorder) GetPopularStocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularStocks", reflect.TypeOf((*MockDBLayer)(nil).GetPopularStocks), arg0)
}

// GetSymbolTickData mocks base method
func (m *MockDBLayer) GetSymbolTickData(arg0, arg1 string) (scrip.SymbolTickData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSymbolTickData", arg0, arg1)
	ret0, _ := ret[0].(scrip.SymbolTickData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSymbolTickData indicates an expected call of GetSymbolTickData
func (mr *MockDBLayerMockRecorder) GetSymbolTickData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSymbolTickData", reflect.TypeOf((*MockDBLayer)(nil).GetSymbolTickData), arg0, arg1)
}

// GetUserByID mocks base method
func (m *MockDBLayer) GetUserByID(arg0 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockDBLayerMockRecorder) GetUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockDBLayer)(nil).GetUserByID), arg0)
}

// GetWatchlistSequence mocks base method
func (m *MockDBLayer) GetWatchlistSequence(arg0 string) ([]watchlist.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchlistSequence", arg0)
	ret0, _ := ret[0].([]watchlist.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchlistSequence indicates an expected call of GetWatchlistSequence
func (mr *MockDBLayerMockRecorder) GetWatchlistSequence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchlistSequence", reflect.TypeOf((*MockDBLayer)(nil).GetWatchlistSequence), arg0)
}

// InsertSymbolIntoWatchlist mocks base method
func (m *MockDBLayer) InsertSymbolIntoWatchlist(arg0 int64, arg1 string, arg2 int64, arg3, arg4, arg5, arg6, arg7 string, arg8 float64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSymbolIntoWatchlist", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertSymbolIntoWatchlist indicates an expected call of InsertSymbolIntoWatchlist
func (mr *MockDBLayerMockRecorder) InsertSymbolIntoWatchlist(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSymbolIntoWatchlist", reflect.TypeOf((*MockDBLayer)(nil).InsertSymbolIntoWatchlist), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// PayinNetbanking mocks base method
func (m *MockDBLayer) PayinNetbanking(arg0, arg1 string, arg2 int, arg3 float64, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayinNetbanking", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayinNetbanking indicates an expected call of PayinNetbanking
func (mr *MockDBLayerMockRecorder) PayinNetbanking(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayinNetbanking", reflect.TypeOf((*MockDBLayer)(nil).PayinNetbanking), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateUser mocks base method
func (m *MockDBLayer) UpdateUser(arg0 user.User) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockDBLayerMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDBLayer)(nil).UpdateUser), arg0)
}

// UpdateWatchlist mocks base method
func (m *MockDBLayer) UpdateWatchlist(arg0 watchlist.Watchlist) (watchlist.Watchlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWatchlist", arg0)
	ret0, _ := ret[0].(watchlist.Watchlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWatchlist indicates an expected call of UpdateWatchlist
func (mr *MockDBLayerMockRecorder) UpdateWatchlist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWatchlist", reflect.TypeOf((*MockDBLayer)(nil).UpdateWatchlist), arg0)
}

// UpdateWatchlistSequence mocks base method
func (m *MockDBLayer) UpdateWatchlistSequence(arg0 []int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWatchlistSequence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWatchlistSequence indicates an expected call of UpdateWatchlistSequence
func (mr *MockDBLayerMockRecorder) UpdateWatchlistSequence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWatchlistSequence", reflect.TypeOf((*MockDBLayer)(nil).UpdateWatchlistSequence), arg0, arg1)
}

// UpdateWatchlistSymbolSequence mocks base method
func (m *MockDBLayer) UpdateWatchlistSymbolSequence(arg0 []watchlist.WatchlistSymbol, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWatchlistSymbolSequence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWatchlistSymbolSequence indicates an expected call of UpdateWatchlistSymbolSequence
func (mr *MockDBLayerMockRecorder) UpdateWatchlistSymbolSequence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWatchlistSymbolSequence", reflect.TypeOf((*MockDBLayer)(nil).UpdateWatchlistSymbolSequence), arg0, arg1)
}

// WatchlistInfo mocks base method
func (m *MockDBLayer) WatchlistInfo(arg0 string) (map[int64]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchlistInfo", arg0)
	ret0, _ := ret[0].(map[int64]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchlistInfo indicates an expected call of WatchlistInfo
func (mr *MockDBLayerMockRecorder) WatchlistInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchlistInfo", reflect.TypeOf((*MockDBLayer)(nil).WatchlistInfo), arg0)
}
